" Plugins ---- {{{

set nocompatible
filetype off

if has('nvim')
    call plug#begin('~/.local/share/nvim/plugged')
else
    call plug#begin('~/.vim/plugged')
endif

Plug 'altercation/vim-colors-solarized'

Plug 'rust-lang/rust.vim'

if has('nvim')
Plug 'autozimu/LanguageClient-neovim', {
    \ 'branch': 'next',
    \ 'do': 'bash install.sh',
    \ }
endif

Plug 'ctrlpvim/ctrlp.vim'

Plug 'scrooloose/nerdtree'

Plug 'scrooloose/nerdcommenter'

Plug 'vim-airline/vim-airline'

Plug 'vim-airline/vim-airline-themes'

Plug 'tpope/vim-fugitive'

Plug 'vim-scripts/rfc-syntax'

Plug 'tpope/vim-git'

Plug 'airblade/vim-gitgutter'

Plug 'majutsushi/tagbar'

Plug 'junegunn/fzf'

Plug 'CraneStation/cranelift.vim'

Plug 'let-def/vimbufsync'

Plug 'whonore/Coqtail'

if has('nvim')
    Plug 'Shougo/deoplete.nvim'
endif

call plug#end()

" }}}

" Vim settings ---- {{{

filetype plugin indent on
syntax enable
set title
set noautoindent
set ruler
"set shortmess=aoOTI
set showmode
set splitbelow
set splitright
set laststatus=2
set nomodeline
set showcmd
set showmatch
set tabstop=8
set shiftwidth=2
set expandtab
set cinoptions=(0,m1,:1
set formatoptions=tcqr2
set laststatus=2
set nomodeline
set softtabstop=2
set textwidth=80
set showtabline=1
set smartcase
set sidescroll=5
set scrolloff=4
set hlsearch
set ttyfast
set history=10000
set hidden
set number
set backspace=indent,eol,start
set ttimeoutlen=100
set exrc
set secure
set colorcolumn=101
set list
set listchars=tab:â–¸-

" Better completion
set complete=.,w,b,u,t
set completeopt=longest,menuone,preview

" }}}

" Leader mapping definitions ---- {{{
let mapleader = "\\"
let maplocalleader = "-"
" }}}

" Random Filetype Settings ---- {{{
augroup filetype_sbt
    autocmd!
    autocmd BufNewFile,BufRead *.sbt set filetype=scala
augroup END

augroup filetype_nse
    autocmd!
    autocmd BufNewFile,BufRead *.nse set filetype=lua
augroup END

augroup filetype_cl
    autocmd!
    autocmd BufNewFile,BufRead *.cl set filetype=c
augroup END

augroup filetype_clif
    autocmd!
    autocmd BufNewFile,BufRead *.clif set filetype=clif
augroup END

augroup filetype_rust
    autocmd!
    autocmd BufNewFile,BufRead *.lalrpop set filetype=rust
augroup END

augroup filetype_qf
    autocmd!
    autocmd FileType qf call AdjustWindowHeight(3, 10)

    function! AdjustWindowHeight(minheight, maxheight)
      exe max([min([line("$"), a:maxheight]), a:minheight]) . "wincmd _"
    endfunction
augroup END
" }}}

" Airline Settings ---- {{{
let g:airline_theme                        = 'simple'
let g:airline_extensions                   = ['branch', 'tabline']
let g:airline_powerline_fonts              = 1
let g:airline#extensions#hunks#enabled     = 1
let g:airline#extensions#branch#enabled    = 1
let g:airline#extensions#tabline#enabled   = 1
" }}}

" Color scheme ---- {{{
autocmd ColorScheme * highlight ExtraWhitespace ctermbg=red
set background=dark
try
    let g:solarized_termcolors=256
    colorscheme solarized
catch
    colorscheme default
endtry
hi clear SpellBad
hi SpellBad ctermbg=None ctermfg=red
" Whitespace ---- {{{
function CatchWhiteSpace()
    match ExtraWhitespace /\s\+\%#\@<!$/
endfunction

augroup extra_whitespace
    au!
    au BufNewFile,BufRead,InsertLeave * call CatchWhiteSpace()
augroup END
" }}}
" }}}

" Vimscript file settings ---- {{{
augroup filetype_vim
    autocmd!
    autocmd FileType vim setlocal foldmethod=marker
augroup END
" }}}

" Folding ---- {{{
set foldlevelstart=0

" Space to toggle folds.
nnoremap <Space> za
vnoremap <Space> za
" }}}

" Anoying keymap settings --- {{{
" Normal Search
nnoremap / /\v
vnoremap / /\v

" Remove Up and Down
nnoremap <up> <nop>
nnoremap <down> <nop>
nnoremap <left> <nop>
nnoremap <right> <nop>
inoremap <up> <nop>
inoremap <down> <nop>
inoremap <left> <nop>
inoremap <right> <nop>

" No help key
inoremap <F1> <ESC>
nnoremap <F1> <ESC>
vnoremap <F1> <ESC>

" Remap semicolon to colon
nnoremap ; :
" }}}

" Useful keymap settings ---- {{{
" Leader remaps
nnoremap <leader>c V`]
nnoremap <leader>ev :split<cr>:e $MYVIMRC<cr>
nnoremap <leader>Ev :e $MYVIMRC<cr>
nnoremap <leader>sv :source $MYVIMRC<cr>
nnoremap <leader>t :NERDTree<cr>
nnoremap <leader>cd :cd %:h<cr>
nnoremap <leader>e :tabe<space>

" Yankring
nnoremap <leader>y :YRShow<cr>

" Usefull shortcuts
onoremap in( :<C-u>:normal! f(vi(<cr>
onoremap il( :<C-u>:normal! F)vi(<cr>
" }}}

" Window Movement Settings {{{
if has('nvim')
    tnoremap <C-h> <C-\><C-n><C-w>h
    tnoremap <C-j> <C-\><C-n><C-w>j
    tnoremap <C-k> <C-\><C-n><C-w>k
    tnoremap <C-l> <C-\><C-n><C-w>l
    tnoremap <C-n> <C-\><C-n>:tabn<cr>
    tnoremap <C-p> <C-\><C-n>:tabp<cr>
endif
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l
nnoremap <C-n> :tabn<cr>
nnoremap <C-p> :tabp<cr>
nnoremap <C-e> :tabe
" }}}

" NERD Tree ---- {{{

noremap  <F2> :NERDTreeToggle<cr>
inoremap <F2> <esc>:NERDTreeToggle<cr>

augroup ps_nerdtree
     au!

     au Filetype nerdtree setlocal nolist
augroup END

let NERDTreeHighlightCursorline = 1
let NERDTreeIgnore = ['.vim$', '\~$', '.*\.pyc$', 'pip-log\.txt$', 'whoosh_index',
                                 \ 'xapian_index', '.*.pid', 'monitor.py', '.*-fixtures-.*.json',
                                  \ '.*\.o$', 'db.db', 'tags.bak', '.*\.pdf$', '.*\.mid$',
                                  \ '.*\.midi$']

let NERDTreeMinimalUI = 1
let NERDTreeDirArrows = 1
let NERDChristmasTree = 1
let NERDTreeChDirMode = 2
let NERDTreeMapJumpFirstChild = 'gK'

" }}}

" Tagbar ---- {{{
nnoremap <silent> <Leader>b :TagbarToggle<CR>
" }}}

" CtrlP ---- {{{
"nnoremap <leader>p :CtrlPTag<cr>
let g:ctrlp_map = '<leader>p'
let g:ctrlp_cmd = 'CtrlP'
let g:ctrlp_root_markers = ['Cargo.toml']
" }}}

" Custom Functions {{{

function! CleanUnusedBuffers()
    let all_buffers = []
    for tab in range(1, tabpagenr('$'))
        for buf in tabpagebuflist(tab)
            call add(all_buffers, buf)
        endfor
    endfor
    for buf in range(1, bufnr('$'))
        if bufexists(buf) && index(all_buffers, buf) == -1
            execute ':bdelete ' . buf
        endif
    endfor
endfunction

function! CleanLines()
    " Clean Crriage Returns
    execute ':%s/\\r\\n//g'
    " Clean Line Feeds
    execute ':%s/\\n//g'
endfunction

function! CallRFC(rfcnum)
    execute ':!rfc -q ' . a:rfcnum
    execute ':view ~/.local/share/rfcs/rfc' . a:rfcnum . '.txt'
    execute ':setfiletype rfc'
endfunction

function! CallSRFC(rfcnum)
    execute ':!rfc -q ' . a:rfcnum
    execute ':split|view ~/.local/share/rfcs/rfc' . a:rfcnum . '.txt'
    execute ':setfiletype rfc'
endfunction

function! CallVRFC(rfcnum)
    execute ':!rfc -q ' . a:rfcnum
    execute ':vsplit|view ~/.local/share/rfcs/rfc' . a:rfcnum . '.txt'
    execute ':setfiletype rfc'
endfunction

function! CallTRFC(rfcnum)
    execute ':!rfc -q ' . a:rfcnum
    execute ':tabe|view ~/.local/share/rfcs/rfc' . a:rfcnum . '.txt'
    execute ':setfiletype rfc'
endfunction

nnoremap <leader>db :call CleanUnusedBuffers()<cr>
nnoremap <leader>l :call CleanCRandLF()<cr>
nnoremap <leader>x :%!xxd<cr>
nnoremap <leader>r :%!xxd -r<cr>
nnoremap <leader>n :%s/\n/\r/g<cr>
command! -nargs=1 Rfc call CallRFC(<q-args>)
command! -nargs=1 RfcSplit call CallSRFC(<q-args>)
command! -nargs=1 RfcVSplit call CallVRFC(<q-args>)
command! -nargs=1 RfcTab call CallTRFC(<q-args>)
" }}}

" CoqTail ---- {{{
let g:coqtail_nomap = 1
let g:coqtail_noident = 1
" }}}
